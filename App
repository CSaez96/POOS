import mysql.connector
from mysql.connector import Error


class DatabaseConnection:
    def __init__(self, host="localhost", database="delivery_app", user="root", password=""):
        self.host = host
        self.database = database
        self.user = user
        self.password = password
        self.connection = None

    def connect(self):
        try:
            self.connection = mysql.connector.connect(
                host=self.host,
                database=self.database,
                user=self.user,
                password=self.password
            )
            if self.connection.is_connected():
                print("Conexión exitosa a la base de datos.")
        except Error as e:
            print(f"Error al conectar a la base de datos: {e}")

    def disconnect(self):
        if self.connection.is_connected():
            self.connection.close()
            print("Conexión cerrada.")


class RepartidorOperaciones:
    def __init__(self, connection):
        self.connection = connection

    def agregar(self, nombre, telefono):
        try:
            cursor = self.connection.cursor()
            cursor.execute("INSERT INTO repartidores (nombre, telefono) VALUES (%s, %s)", (nombre, telefono))
            self.connection.commit()
            print("Repartidor agregado correctamente.")
        except Error as e:
            print(f"Error al agregar repartidor: {e}")

    def listar(self):
        try:
            cursor = self.connection.cursor()
            cursor.execute("SELECT * FROM repartidores")
            repartidores = cursor.fetchall()
            if repartidores:
                for repartidor in repartidores:
                    print(f"ID: {repartidor[0]}, Nombre: {repartidor[1]}, Teléfono: {repartidor[2]}")
            else:
                print("No hay repartidores registrados.")
        except Error as e:
            print(f"Error al listar repartidores: {e}")

    def actualizar(self, id, nombre, telefono):
        try:
            cursor = self.connection.cursor()
            cursor.execute("UPDATE repartidores SET nombre=%s, telefono=%s WHERE id=%s", (nombre, telefono, id))
            self.connection.commit()
            print("Repartidor actualizado correctamente.")
        except Error as e:
            print(f"Error al actualizar repartidor: {e}")

    def eliminar(self, id):
        try:
            cursor = self.connection.cursor()
            cursor.execute("DELETE FROM repartidores WHERE id=%s", (id,))
            self.connection.commit()
            print("Repartidor eliminado correctamente.")
        except Error as e:
            print(f"Error al eliminar repartidor: {e}")


class ProductoOperaciones:
    def __init__(self, connection):
        self.connection = connection

    def agregar(self, nombre, descripcion, precio):
        try:
            cursor = self.connection.cursor()
            cursor.execute(
                "INSERT INTO productos (nombre, descripcion, precio) VALUES (%s, %s, %s)",
                (nombre, descripcion, precio),
            )
            self.connection.commit()
            print("Producto agregado correctamente.")
        except Error as e:
            print(f"Error al agregar producto: {e}")

    def listar(self):
        try:
            cursor = self.connection.cursor()
            cursor.execute("SELECT * FROM productos")
            productos = cursor.fetchall()
            if productos:
                for producto in productos:
                    print(f"ID: {producto[0]}, Nombre: {producto[1]}, Descripción: {producto[2]}, Precio: {producto[3]}")
            else:
                print("No hay productos registrados.")
        except Error as e:
            print(f"Error al listar productos: {e}")

    def actualizar(self, id, nombre, descripcion, precio):
        try:
            cursor = self.connection.cursor()
            cursor.execute(
                "UPDATE productos SET nombre=%s, descripcion=%s, precio=%s WHERE id=%s",
                (nombre, descripcion, precio, id),
            )
            self.connection.commit()
            print("Producto actualizado correctamente.")
        except Error as e:
            print(f"Error al actualizar producto: {e}")

    def eliminar(self, id):
        try:
            cursor = self.connection.cursor()
            cursor.execute("DELETE FROM productos WHERE id=%s", (id,))
            self.connection.commit()
            print("Producto eliminado correctamente.")
        except Error as e:
            print(f"Error al eliminar producto: {e}")


def main():
    db = DatabaseConnection()
    db.connect()

    repartidor_ops = RepartidorOperaciones(db.connection)
    producto_ops = ProductoOperaciones(db.connection)

    while True:
        print("\n=== Menú Principal ===")
        print("1. Gestión de repartidores")
        print("2. Gestión de productos")
        print("3. Salir")
        opcion = input("Seleccione una opción: ").strip()

        if opcion == "1":
            print("\n=== Gestión de Repartidores ===")
            print("1. Agregar repartidor")
            print("2. Listar repartidores")
            print("3. Actualizar repartidor")
            print("4. Eliminar repartidor")
            sub_opcion = input("Seleccione una opción: ").strip()

            if sub_opcion == "1":
                nombre = input("Nombre: ").strip()
                telefono = input("Teléfono: ").strip()
                repartidor_ops.agregar(nombre, telefono)
            elif sub_opcion == "2":
                repartidor_ops.listar()
            elif sub_opcion == "3":
                id = input("ID del repartidor: ").strip()
                nombre = input("Nuevo nombre: ").strip()
                telefono = input("Nuevo teléfono: ").strip()
                repartidor_ops.actualizar(id, nombre, telefono)
            elif sub_opcion == "4":
                id = input("ID del repartidor a eliminar: ").strip()
                repartidor_ops.eliminar(id)

        elif opcion == "2":
            print("\n=== Gestión de Productos ===")
            print("1. Agregar producto")
            print("2. Listar productos")
            print("3. Actualizar producto")
            print("4. Eliminar producto")
            sub_opcion = input("Seleccione una opción: ").strip()

            if sub_opcion == "1":
                nombre = input("Nombre: ").strip()
                descripcion = input("Descripción: ").strip()
                precio = input("Precio: ").strip()
                producto_ops.agregar(nombre, descripcion, precio)
            elif sub_opcion == "2":
                producto_ops.listar()
            elif sub_opcion == "3":
                id = input("ID del producto: ").strip()
                nombre = input("Nuevo nombre: ").strip()
                descripcion = input("Nueva descripción: ").strip()
                precio = input("Nuevo precio: ").strip()
                producto_ops.actualizar(id, nombre, descripcion, precio)
            elif sub_opcion == "4":
                id = input("ID del producto a eliminar: ").strip()
                producto_ops.eliminar(id)

        elif opcion == "3":
            print("\n¡Hasta luego!")
            break

        else:
            print("Opción no válida. Intente nuevamente.")

    db.disconnect()


if __name__ == "__main__":
    main()